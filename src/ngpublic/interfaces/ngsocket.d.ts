/// <Reference path="./include.d.ts"/>
/**
 * Интерфейс запроса, получаемого из ngsocket при входящем сообщении. Используется для отправки ответа
 * на это входящее сообщение
 */
export interface IRequest {
    /**
     * Идентификатор запроса, в прикладных целях не используется. Нужен для служебного использования
     */
    readonly id: string;

    /**
     * Функция для посылки ответа
     * @param result - ответ
     */
    send(result:any):void;
}

/**
 * Интерфейс ошибки ngsocket
 */
export interface INgSocketError {
    /** Прикладная ошибка */
    appError?:  IResultDescr;

    /** Системное событие, в случае системной ошибки (для служебных целей) */
    socketError?:   Event;
}

/** Состояние запроса ngsocket, возвращается в callback-функции onRequestStateChanged */
export enum ESocketRequestState {
    /** Запущен запрос из представления в ядро */
    hostRequestStarted,
    /** Запрос из представления в ядро завершен */
    hostRequestDone,
    /** Запущен вызов из ядра в представление */
    clientRequestStarted,
    /** Вызов из ядра в представление завершен */
    clientRequestDone,
}

/**  Интерфейс объекта NgSocket */
export interface INgSocket{
    /**
     * Добавить функцию-обработчик на получение события активации.
     * Функция вызывается, когда соответсвующее представление станет активно
     * @param callBack - Функция, обработчик события
     */
    onActivate(callBack:(args:any)=>void)
    /**
     * Добавить функцию-обработчик на получение события деактивации.
     * Функция вызывается, когда соответсвующее представление закончит работу.
     * По этому событию необходимо удалить какие-либо критичные данные связанные с текущей
     * клиентской сессией
     * @param callBack - Функция, обработчик события
     */
    onDeactivate(callBack:()=>void)

    /**
     * Добавить функцию-обработчик на событие, когда будет установлено соединение.
     * Данный функционал полезен в root ngsocket, по нему можно отслеживать работоспособность ядра.
     * @param callBack - Функция, обработчик события
     */
    onConnected(callBack:()=>void)
    /**
     * Добавить функцию-обработчик на событие, когда будет потеряно соединение.
     * Данный функционал полезен в root ngsocket, по нему можно отслеживать работоспособность ядра.
     * @param callBack - Функция, обработчик события
     */
    onDisconnected(callBack:()=>void)

    /**
     * Добавить функцию-обработчик, которая вызовется в случае возникновения ошибки.
     * Например повторное соединение с одним приложением.
     * @param callBack - Функция, обработчик события
     */
    onError(callBack:(err: INgSocketError)=>void)

    /**
     * Добавить функцию-обработчик на событие начала/завершения синхронного запроса.
     * P.S. Для корректного закрытия представления, например, по истечении клиентского таймаута, необходимо
     * отслеживать текущее состояние запроса. И если выполняется какой-то запрос, то при закрытии представления это необходимо
     * отслеживать. Например, если начали операцию выдачи наличных, нельзя закрывать представление до завершения
     * операции
     * @param handler - Функция, обработчик события
     */
    onRequestStateChanged(handler: (newState: ESocketRequestState) => void): void;

    /**
     * Добавить функцию-обработчик на входящее событие
     * @param name - имя входящего события
     * @param callBack - функция обработчик. в функции обработчике два параметра, входные данные
     * и специальный класс для отправки результата обработки входящего сообщения. Например, посылка запроса
     * на подтверждение операции
     */
    on(name:string, callBack:((v:any, request?:IRequest)=>void)|null|undefined);

    /**
     * Аналог функции [[on]], только можно повесить несколько обработчиков на одно событие.
     * @param name - имя входящего события
     * @param func - Функция, обработчик события
     */
    addEventListener(name:string, func:(v:any)=>void);

    /**
     * Убрать функцию-обработчик на данное событие.
     * @param name - имя входящего события
     * @param func - функция-обработчик, которую надо убрать для события
     */
    removeEventListener(name:string, func:(v:any)=>void);

    /**
     * Послать запрос на выполнение функции из представления в приложение.
     * @param name - имя функции
     * @param obj - входные данные запроса
     * @param okFunc - callBack-функция, которая вызовется в случае успешного выполнения.
     * В аргументе функции передаётся результат выполнения запроса
     * @param errFunc - callBack-функция, которая вызовется в случае ошибки.
     * В аргументе функции передаётся описание ошибки
     */
    send(name, obj?:any, okFunc?:(v:any)=>void, errFunc?:(v:IResultDescr)=>void);

    /**
     * Послать запрос на выполнение функции из представления в приложение. Аналог функции send,
     * но возвращает promise. В данном случае ошибка вернется через исключение.
     * @param name - имя функции
     * @param obj - входные данные запроса
     * @exception e - Исключение типа [[IResultDescr]] в случае ошибки
     */
    request(name: string, obj?:any): Promise<any>;

    /**
     * Закрыть существующее соединение, освободить все ресурсы, очистить все ранее зарегистрированные
     * функции обработчики
     */
    close();
}

export interface GlobalNgSocket {
    /**
     * Создать управляющее соединение. В этом соединении доступны следующие события:
     * * "ng_createView" - создать представление (но не отображать); входные данные {id:string}
     * * "ng_showView" - показать ранее созданное представление после вызова onActivate; входные данные {id:string}
     * * "ng_hideView" - скрыть показанное представление; входные данные {id:string}
     * * "ng_destroyView" - удалить представление; входные данные {id:string}.
     * * "ng_progress" - показать прогресс-бар; входные данные {percent:number}. Внимание! Необходимо учитывать, что,
     *      в редких случаях, возможна неупорядоченность посылаемых данных, например 1,2,3,10,4
     * * "ng_progressMsg" - показать сообщение о текущем процессе загрузки; входные данные {text:string, isError?:boolean},
     *      где text - отображаемое сообщение. isError === true, в случае если это сообщение об ошибке
     */
     ngRootSocket(host?:string):INgSocket;

    /**
     * Создать соединение для соответствующего представления.
     * @param viewId - идентификатор представления (должен быть получен от root соединения, его возвращает функция ng_createView)
     */
    ngCreateViewSocket(viewId:string, host?:string):INgSocket;

    /**
     * Сброс всех текущих соединений, необходимо для тестовых целей hotReload в devServer
     */
    ngSocketReset(): void;
    /**
     * Указать адрес вебсокета приложения
     */
    ngSetServerLocation(host:string):void;

    /** Временная переменная для нужд разработки */
    ngCashIn:any;
}

